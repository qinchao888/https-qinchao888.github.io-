<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chrome常用快捷键</title>
    <url>/2022/07/04/Chrome/keyboard/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>打开新窗口</td>
<td>⌘ + n</td>
</tr>
<tr>
<td>在无痕模式下打开新窗口</td>
<td>⌘ + Shift + n</td>
</tr>
<tr>
<td>打开新的标签页，并跳转到该标签页</td>
<td>⌘ + t</td>
</tr>
<tr>
<td>按标签页的关闭顺序重新打开先前关闭的标签页</td>
<td>⌘ + Shift + t</td>
</tr>
<tr>
<td>跳转到下一个打开的标签页</td>
<td>⌘ + Option + 向右箭头键</td>
</tr>
<tr>
<td>跳转到上一个打开的标签页</td>
<td>⌘ + Option + 向左箭头键</td>
</tr>
<tr>
<td>跳转到特定标签页</td>
<td>⌘ + 1 到 ⌘ + 8</td>
</tr>
<tr>
<td>跳转到最后一个标签页</td>
<td>⌘ + 9</td>
</tr>
<tr>
<td>关闭当前的标签页或弹出式窗口</td>
<td>⌘ + w</td>
</tr>
<tr>
<td>显示或隐藏书签栏</td>
<td>Ctrl + Shift + b</td>
</tr>
<tr>
<td>打开书签管理器</td>
<td>⌘ + Option + b</td>
</tr>
<tr>
<td>在新标签页中打开“设置”页</td>
<td>⌘ + ,</td>
</tr>
<tr>
<td>在新标签页中打开“历史记录”页</td>
<td>⌘ + y</td>
</tr>
<tr>
<td>在新标签页中打开“下载内容”页</td>
<td>⌘ + Shift + j</td>
</tr>
<tr>
<td>打开查找栏搜索当前网页</td>
<td>⌘ + f</td>
</tr>
<tr>
<td>跳转到与查找栏中搜索字词相匹配的下一条内容</td>
<td>⌘ + g</td>
</tr>
<tr>
<td>跳转到与查找栏中搜索字词相匹配的上一条内容</td>
<td>⌘ + Shift + g</td>
</tr>
<tr>
<td>打开“开发者工具”</td>
<td>⌘ + Option + i （⌘ + Shift + d切换位置）</td>
</tr>
<tr>
<td>使用另一帐号登录、以访客身份浏览，或者访问付款和密码信息</td>
<td>⌘ + Shift + m</td>
</tr>
<tr>
<td>跳转到地址栏</td>
<td>⌘ + l</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
  </entry>
  <entry>
    <title>常用网站</title>
    <url>/2022/06/21/Chrome/website/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 纯文本网站</span></span><br><span class="line"><span class="attr">data</span>:text/html, <span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">contenteditable</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://caniuse.com/">caniuse</a></p>
]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
  </entry>
  <entry>
    <title>Babel</title>
    <url>/2022/08/18/Babel/index/</url>
    <content><![CDATA[<h2 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h2><p>命令行使用babel</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install @babel/core @babel/cli -g</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>babel</category>
      </categories>
  </entry>
  <entry>
    <title>Css常用的对齐技巧</title>
    <url>/2022/08/15/Css/align/</url>
    <content><![CDATA[<h3 id="图标与多行内容中的第一行内容垂直居中对齐"><a href="#图标与多行内容中的第一行内容垂直居中对齐" class="headerlink" title="图标与多行内容中的第一行内容垂直居中对齐"></a>图标与多行内容中的第一行内容垂直居中对齐</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: flex-start;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.icon-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-shrink</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.title-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">word-break</span>: break-word;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.notice-msg</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#1f2329</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.notice-title</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#245bdb</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon-wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:url(&#x27;data:image/svg+xml,%3Csvg%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12%2023c6.075%200%2011-4.925%2011-11S18.075%201%2012%201%201%205.925%201%2012s4.925%2011%2011%2011Z%22%20fill%3D%22%233370ff%22%3E%3C%2Fpath%3E%3Cpath%20d%3D%22M13%207.5a1%201%200%201%200-2%200%201%201%200%200%200%202%200Zm-2%204v4h-.5a1%201%200%201%200%200%202h3a1%201%200%201%200%200-2H13c0-.667%200-1.333.002-2%200-1.001.002-2.002%200-3.004a.998.998%200%200%200-.998-.996H11a1%201%200%201%200%200%202Z%22%20fill%3D%22%23fff%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E&#x27;) no-repeat;background-size:100% 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title-wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;notice-msg&quot;</span>&gt;</span>【提示信息】：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;notice-title&quot;</span>&gt;</span>我是内容我是内容我是内容我是内容我是内容我是内容我是内容我是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Css</category>
      </categories>
  </entry>
  <entry>
    <title>rem适配</title>
    <url>/2022/08/08/Css/fit/</url>
    <content><![CDATA[<h3 id="rem适配"><a href="#rem适配" class="headerlink" title="rem适配"></a>rem适配</h3><p><a href="https://github.com/amfe/lib-flexible">参考</a></p>
<p>一般设置rem时需要根据设计稿的px进行计算，将其转化为rem，转化方式一般为：calc(val * 10 &#x2F; 375)</p>
<p>如：200px -&gt; calc(200rem * 10 &#x2F; 375) 或 calc(200 * 10 &#x2F; 375 * 1rem)，注：* 和 &#x2F; 时calc中可以不保留空格，但是在进行 + - 时，数值间必须保留空格</p>
<p>在less中使用javascript</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="comment">// webpack5.0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">lessOptions</span>: &#123;</span><br><span class="line">      <span class="attr">javascriptEnabled</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.remMixin</span>() &#123;</span><br><span class="line">  <span class="variable">@functions:</span> <span class="built_in">~`(function() &#123;</span></span><br><span class="line"><span class="built_in">    this.rem = function(size) &#123;</span></span><br><span class="line"><span class="built_in">      return size * 10 / 375 + &#x27;rem&#x27;;</span></span><br><span class="line"><span class="built_in">    &#125;</span></span><br><span class="line"><span class="built_in">  &#125;)()`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.remMixin</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 */</span></span><br><span class="line"><span class="selector-class">.width</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">~`rem(375)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Css</category>
      </categories>
  </entry>
  <entry>
    <title>Css基础知识</title>
    <url>/2022/05/27/Css/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Css</category>
      </categories>
  </entry>
  <entry>
    <title>flex</title>
    <url>/2022/06/20/Css/flex/</url>
    <content><![CDATA[<h3 id="flex-direction-column导致overflow-auto无效"><a href="#flex-direction-column导致overflow-auto无效" class="headerlink" title="flex-direction column导致overflow auto无效"></a>flex-direction column导致overflow auto无效</h3><h4 id="只有一层display-flex，表现正常"><a href="#只有一层display-flex，表现正常" class="headerlink" title="只有一层display:flex，表现正常"></a>只有一层display:flex，表现正常</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>title<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="多层display-flex"><a href="#多层display-flex" class="headerlink" title="多层display:flex"></a>多层display:flex</h4><p>本质上是受flex-direction: column的影响，导致设置flex-direction: column的子元素（非overflow:auto元素）需要设置<br>min-height: 0;（也可设置height，只要值非auto即可）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>title<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Css</category>
      </categories>
  </entry>
  <entry>
    <title>Cypress</title>
    <url>/2022/06/22/Cypress/index/</url>
    <content><![CDATA[<p>cypress version 10.1.0</p>
<p><a href="https://docs.cypress.io/api/commands/and">官方文档</a></p>
<h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开窗口，可自己选择想要运行的文件，修改代码后自动执行</span></span><br><span class="line">&gt; npx cypress open</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行单个文件，不会监听代码的变更</span></span><br><span class="line">&gt; npx cypress run --spec cypress/e2e/test.cy.ts --browser chrome --headed --no-exit</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="before-和-beforeEach-和-after"><a href="#before-和-beforeEach-和-after" class="headerlink" title="before 和 beforeEach 和 after"></a>before 和 beforeEach 和 after</h4><p>before：在第一个用例(it)之前运行</p>
<p>beforeEach：在每个it执行前都会执行一次。</p>
<p>after：在所有用例执行后运行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础示例</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;module&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">before</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before do something&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before each do something&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;test1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;check something&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ....</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;test2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;check something&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ....</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h4><p>描述块，其内部定义的beforeEach函数只对其内部的it作用</p>
<h3 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元素存在</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;exist&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素不存在</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素不可点击</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.disabled&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素可点击</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;not.be.disabled&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素可见</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素不可见</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.hidden&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素数量</span></span><br><span class="line">cy.<span class="title function_">find</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第几个元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody&gt;tr&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>); <span class="comment">// 第0个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody&gt;tr&#x27;</span>).<span class="title function_">first</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一个元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;tbody&gt;tr&#x27;</span>).<span class="title function_">last</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一个元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其下的所有元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">nextAll</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其下的所有元素，直到指定的元素（不包含）为止</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#veggies&#x27;</span>).<span class="title function_">nextUntil</span>(<span class="string">&#x27;#nuts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一个元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.active&#x27;</span>).<span class="title function_">prev</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其上的所有元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.third&#x27;</span>).<span class="title function_">prevAll</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其上的所有元素，直到指定的元素（不包含）为止</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#nuts&#x27;</span>).<span class="title function_">prevUntil</span>(<span class="string">&#x27;#veggies&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相邻元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">siblings</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">filter</span>(<span class="string">&#x27;.active&#x27;</span>); <span class="comment">// 具有active类名的li元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">filter</span>(<span class="string">&#x27;:contains(&quot;Services&quot;)&#x27;</span>; <span class="comment">// filter by text</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">not</span>(<span class="string">&#x27;.active&#x27;</span>); <span class="comment">// 无active类名的li元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素的父元素</span></span><br><span class="line"><span class="comment">// &lt;tr&gt;&lt;td&gt;My first client&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;My first client&#x27;</span>).<span class="title function_">parent</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素所有的父元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;li.active&#x27;</span>).<span class="title function_">parents</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素所有的父元素，直至指定元素（不包含）为止</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.active&#x27;</span>).<span class="title function_">parentsUntil</span>(<span class="string">&#x27;.nav&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素的子元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">children</span>(); <span class="comment">// 所有的li元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">children</span>(<span class="string">&#x27;.active&#x27;</span>); <span class="comment">// 具有active类名的li元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素本身或离得最近的祖先元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">closest</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scopes all subsequent cy commands to within this element.</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">within</span>(<span class="function">(<span class="params">$form</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=&quot;email&quot;]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;john.doe@email.com&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;input[name=&quot;password&quot;]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">root</span>().<span class="title function_">submit</span>(); <span class="comment">// cy.root()即为cy.get(&#x27;form&#x27;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// temporarily escape the .within context，脱离上下文</span></span><br><span class="line">  cy.<span class="title function_">root</span>().<span class="title function_">closest</span>(<span class="string">&#x27;.example&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;Joe&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素别名</span></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;button[type=submit]&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;submitBtn&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;disables on click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@submitBtn&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.disabled&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="表单元素操作"><a href="#表单元素操作" class="headerlink" title="表单元素操作"></a>表单元素操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置值</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-test-id=&quot;textarea&quot;]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;this is textarea value&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测值</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-test-id=&quot;textarea&quot;]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;this is textarea value&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测文本：select</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;select#name option:selected&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;Peter&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否勾选</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input[type=&quot;checkbox&quot;]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.checked&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 勾选</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[type=&quot;checkbox&quot;]&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[type=&quot;radio&quot;]&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line"><span class="comment">// 勾选指定值的元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[type=&quot;radio&quot;]&#x27;</span>).<span class="title function_">check</span>(<span class="string">&#x27;this is radio value&#x27;</span>)</span><br><span class="line"><span class="comment">// 勾选多个指定值的元素</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;form input&#x27;</span>).<span class="title function_">check</span>([<span class="string">&#x27;this is input value&#x27;</span>, <span class="string">&#x27;this is radio value&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消勾选</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[type=&quot;checkbox&quot;]&#x27;</span>).<span class="title function_">uncheck</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否被选中：select</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;option:first&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.selected&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否聚焦</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.focus&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚焦</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">focus</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失焦</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">blur</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已聚焦的元素</span></span><br><span class="line">cy.<span class="title function_">focused</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除input或textarea元素值</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// select</span></span><br><span class="line"><span class="comment">// Select the option with the text apples</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;select&#x27;</span>).<span class="title function_">select</span>(<span class="string">&#x27;apples&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;456&#x27;</span>);</span><br><span class="line"><span class="comment">// Select the option with the value &quot;456&quot;</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;select&#x27;</span>).<span class="title function_">select</span>(<span class="string">&#x27;456&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;456&#x27;</span>);</span><br><span class="line"><span class="comment">// Select the option with index 0</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;select&#x27;</span>).<span class="title function_">select</span>(<span class="number">0</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;456&#x27;</span>);</span><br><span class="line"><span class="comment">// 多选</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;select&#x27;</span>).<span class="title function_">select</span>([<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>]).<span class="title function_">invoke</span>(<span class="string">&#x27;val&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;deep.equal&#x27;</span>, [<span class="string">&#x27;456&#x27;</span>, <span class="string">&#x27;458&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="属性值检测"><a href="#属性值检测" class="headerlink" title="属性值检测"></a>属性值检测</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css check</span></span><br><span class="line"><span class="comment">// 判断test元素是否存在css属性cursor: not-allowed</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-test-id=&quot;test&quot;]&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;cursor&#x27;</span>).<span class="title function_">and</span>(<span class="string">&#x27;equal&#x27;</span>, <span class="string">&#x27;not-allowed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// class check</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// id check</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.id&#x27;</span>, <span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// attr check</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.attr&#x27;</span>, <span class="string">&#x27;href&#x27;</span>); </span><br></pre></td></tr></table></figure>

<h3 id="内容检测"><a href="#内容检测" class="headerlink" title="内容检测"></a>内容检测</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象属性检测</span></span><br><span class="line">cy.<span class="title function_">wrap</span>(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>).<span class="title function_">and</span>(<span class="string">&#x27;eq&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;test content&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;tr&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">should</span>(<span class="string">&#x27;contain&#x27;</span>, <span class="string">&#x27;Canada&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 忽略大小写</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;textarea&#x27;</span>).<span class="title function_">clear</span>().<span class="title function_">type</span>(<span class="string">&#x27;Capital Sentence&#x27;</span>).<span class="title function_">contains</span>(<span class="string">&#x27;capital sentence&#x27;</span>, &#123; <span class="attr">matchCase</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点内容是否为空</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.empty&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含字符</span></span><br><span class="line">cy.<span class="title function_">wrap</span>(<span class="string">&#x27;content&#x27;</span>).<span class="title function_">and</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;con&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含字符</span></span><br><span class="line">cy.<span class="title function_">wrap</span>(<span class="string">&#x27;content&#x27;</span>).<span class="title function_">and</span>(<span class="string">&#x27;not.include&#x27;</span>, <span class="string">&#x27;can&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">go</span>(<span class="string">&#x27;back&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">go</span>(<span class="string">&#x27;forward&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">cy.<span class="title function_">go</span>(<span class="number">1</span>);</span><br><span class="line">cy.<span class="title function_">reload</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// url</span></span><br><span class="line">cy.<span class="title function_">url</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// url中#及其后的内容</span></span><br><span class="line">cy.<span class="title function_">hash</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// location</span></span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;http://localhost:8000/app/index.html?q=dan#/users/123/edit&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">location</span>().<span class="title function_">should</span>(<span class="function">(<span class="params">loc</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">hash</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;#/users/123/edit&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">host</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;localhost:8000&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">hostname</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">href</span>).<span class="property">to</span>.<span class="title function_">eq</span>(</span><br><span class="line">    <span class="string">&#x27;http://localhost:8000/app/index.html?q=dan#/users/123/edit&#x27;</span></span><br><span class="line">  )</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">origin</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;http://localhost:8000&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">pathname</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;/app/index.html&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">port</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;8000&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">protocol</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;http:&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="property">search</span>).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;?q=dan&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(loc.<span class="title function_">toString</span>()).<span class="property">to</span>.<span class="title function_">eq</span>(</span><br><span class="line">    <span class="string">&#x27;http://localhost:8000/app/index.html?q=brian#/users/123/edit&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视口大小</span></span><br><span class="line">cy.<span class="title function_">viewport</span>(<span class="number">550</span>, <span class="number">750</span>); <span class="comment">// Set viewport to 550px x 750px</span></span><br><span class="line">cy.<span class="title function_">viewport</span>(<span class="string">&#x27;ipad-2&#x27;</span>); <span class="comment">// 768	x 1024</span></span><br></pre></td></tr></table></figure>

<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;length&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;be.gt&#x27;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">wrap</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span> &#125;).<span class="title function_">should</span>(<span class="string">&#x27;have.property&#x27;</span>, <span class="string">&#x27;name&#x27;</span>).<span class="title function_">and</span>(<span class="string">&#x27;match&#x27;</span>, <span class="regexp">/bc/</span>);</span><br></pre></td></tr></table></figure>

<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">clock</span>();</span><br><span class="line">cy.<span class="title function_">tick</span>(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// debug</span></span><br><span class="line">cy.<span class="title function_">debug</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// document</span></span><br><span class="line">cy.<span class="title function_">document</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line">cy.<span class="title function_">window</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// end：终止当前链</span></span><br><span class="line">cy.<span class="title function_">contains</span>(<span class="string">&#x27;User: Cheryl&#x27;</span>)</span><br><span class="line">  .<span class="title function_">click</span>()</span><br><span class="line">  .<span class="title function_">end</span>() <span class="comment">// yield null</span></span><br><span class="line">  .<span class="title function_">contains</span>(<span class="string">&#x27;User: Charles&#x27;</span>)</span><br><span class="line">  .<span class="title function_">click</span>() <span class="comment">// contains looks for content in document now</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// its：Get a property&#x27;s value on the previously yielded subject.</span></span><br><span class="line">cy.<span class="title function_">wrap</span>(&#123; <span class="attr">width</span>: <span class="string">&#x27;50&#x27;</span> &#125;).<span class="title function_">its</span>(<span class="string">&#x27;width&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// log</span></span><br><span class="line">cy.<span class="title function_">log</span>(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// scollIntoView</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;button#checkout&#x27;</span>).<span class="title function_">scrollIntoView</span>().<span class="title function_">should</span>(<span class="string">&#x27;be.visible&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// shadow dom</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.shadow-host&#x27;</span>).<span class="title function_">shadow</span>().<span class="title function_">find</span>(<span class="string">&#x27;.my-button&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// spread：数组变成参数</span></span><br><span class="line">cy.<span class="title function_">wait</span>([<span class="string">&#x27;@getUsers&#x27;</span>, <span class="string">&#x27;@getActivities&#x27;</span>, <span class="string">&#x27;@getComments&#x27;</span>]).<span class="title function_">spread</span>(</span><br><span class="line">  <span class="function">(<span class="params">getUsers, getActivities, getComments</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// each interception is now an individual argument</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// title</span></span><br><span class="line">cy.<span class="title function_">title</span>().<span class="title function_">should</span>(<span class="string">&#x27;eq&#x27;</span>, <span class="string">&#x27;this is title&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="本地mock数据"><a href="#本地mock数据" class="headerlink" title="本地mock数据"></a>本地mock数据</h4><ol>
<li>注意：as命令是异步的，需要在其他的异步命令中获取数据，如在then中</li>
<li>fixture中使用this获取到as别名的数据</li>
<li>All intercepts are automatically cleared before every test.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/api/test**&#x27;</span>, &#123; <span class="attr">fixture</span>: <span class="string">&#x27;test.json&#x27;</span> &#125;).<span class="title function_">as</span>(</span><br><span class="line">  <span class="string">&#x27;getTestData&#x27;</span></span><br><span class="line">);</span><br><span class="line">cy.<span class="title function_">wait</span>([<span class="string">&#x27;@getTestData&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">fixture</span>(<span class="string">&#x27;users-admins.json&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;admins&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;the users fixture is bound to this.admins&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 注意不要使用箭头函数</span></span><br><span class="line">  cy.<span class="title function_">log</span>(<span class="string">`There are <span class="subst">$&#123;<span class="variable language_">this</span>.admins.length&#125;</span> administrators.`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过设置请求的alias来设置别名</span></span><br><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/graphql&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;query&#x27;</span>) &amp;&amp; req.<span class="property">body</span>.<span class="property">query</span>.<span class="title function_">includes</span>(<span class="string">&#x27;mutation&#x27;</span>)) &#123;</span><br><span class="line">    req.<span class="property">alias</span> = <span class="string">&#x27;gqlMutation&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// assert that a matching request has been made</span></span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@gqlMutation&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求结果的检测</span></span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@someRoute&#x27;</span>).<span class="title function_">its</span>(<span class="string">&#x27;request.body&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作请求结果</span></span><br><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;/integrations&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// req.continue() with a callback will send the request to</span></span><br><span class="line">  <span class="comment">// the destination server</span></span><br><span class="line">  req.<span class="title function_">continue</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// &#x27;res&#x27; represents the real destination response</span></span><br><span class="line">    <span class="comment">// you can manipulate &#x27;res&#x27; before it&#x27;s sent to the browser</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="异步数据"><a href="#异步数据" class="headerlink" title="异步数据"></a>异步数据</h4><p>cypress中的then类似于Promise，但是不能当做Promise使用，即在内部使用 new Promise 等将或报错，只能使用链式的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @typescript-eslint/no-invalid-this: off */</span></span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">fixture</span>(<span class="string">&#x27;test.json&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;testData&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">fixture</span>(<span class="string">&#x27;user.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">  res.<span class="property">data</span>.<span class="property">test</span> = <span class="variable language_">this</span>.<span class="property">testData</span>;</span><br><span class="line">  <span class="keyword">const</span> cya = cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;api/user&#x27;</span>, res);</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">as</span>) &#123;</span><br><span class="line">    cya.<span class="title function_">as</span>(config.<span class="property">as</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;not.be.empty&#x27;</span>)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="function">(<span class="params">$p: JQuery&lt;HTMLParagraphElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>($p).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">length</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>($p.<span class="title function_">first</span>()).<span class="property">to</span>.<span class="title function_">contain</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">classes</span>: <span class="title class_">JQuery</span>&lt;<span class="built_in">string</span>&gt; = $p.<span class="title function_">map</span>(<span class="function">(<span class="params">i, el: HTMLParagraphElement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">jEl</span>: <span class="title class_">JQuery</span>&lt;<span class="title class_">HTMLParagraphElement</span>&gt; = <span class="title class_">Cypress</span>.$(el);</span><br><span class="line">      <span class="keyword">return</span> jEl.<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">classList</span>: <span class="built_in">string</span>[] = classes.<span class="title function_">get</span>();</span><br><span class="line">    <span class="title function_">expect</span>(classList).<span class="property">to</span>.<span class="property">deep</span>.<span class="title function_">eq</span>([<span class="string">&#x27;text-primary&#x27;</span>, <span class="string">&#x27;text-danger&#x27;</span>, <span class="string">&#x27;text-default&#x27;</span>]);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;ul&gt;li&#x27;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">$el, index, $list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// $el is a wrapped jQuery element</span></span><br><span class="line">  <span class="keyword">if</span> ($el.<span class="title function_">someMethod</span>() === <span class="string">&#x27;something&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// wrap this element so we can</span></span><br><span class="line">    <span class="comment">// use cypress commands on it</span></span><br><span class="line">    cy.<span class="title function_">wrap</span>($el).<span class="title function_">click</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="play-mp3"><a href="#play-mp3" class="headerlink" title="play mp3"></a>play mp3</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">fixture</span>(<span class="string">&#x27;audio/sound.mp3&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">mp3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uri = <span class="string">&#x27;data:audio/mp3;base64,&#x27;</span> + mp3</span><br><span class="line">  <span class="keyword">const</span> audio = <span class="keyword">new</span> <span class="title class_">Audio</span>(uri)</span><br><span class="line"></span><br><span class="line">  audio.<span class="title function_">play</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="get和find的区别"><a href="#get和find的区别" class="headerlink" title="get和find的区别"></a>get和find的区别</h3><p>The cy.get command always starts its search from the cy.root element. In most cases, it is the document element, unless used inside the .within() command. The .find command starts its search from the current subject.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test-title&quot;</span>&gt;</span>cy.get vs .find<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comparison&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;feature&quot;</span>&gt;</span>Both are querying commands<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#comparison&#x27;</span>)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// finds the div.test-title outside the #comparison</span></span><br><span class="line">  <span class="comment">// and the div.feature inside</span></span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;test-title&#x27;</span>)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;feature&#x27;</span>)</span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;#comparison&#x27;</span>)</span><br><span class="line">  .<span class="title function_">find</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// the search is limited to the tree at #comparison element</span></span><br><span class="line">  <span class="comment">// so it finds div.feature only</span></span><br><span class="line">  .<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">  .<span class="title function_">and</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;feature&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Cypress</category>
      </categories>
  </entry>
  <entry>
    <title>ESLint</title>
    <url>/2022/08/24/ESLint/index/</url>
    <content><![CDATA[<h2 id="vscode配置使用eslint"><a href="#vscode配置使用eslint" class="headerlink" title="vscode配置使用eslint"></a>vscode配置使用eslint</h2><ol>
<li>安装 ESLint 插件</li>
<li>Settings中配置ESLint的auto fix on save，设置为on即可</li>
<li>在项目下新建.eslintrc文件，自定义配置一些rules</li>
<li>在项目下新建.eslintignore文件，忽略某些文件或文件夹的校验</li>
</ol>
<h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h2><h3 id="项目中配置了新的eslint规则，但是命令行依旧输出一堆的warning"><a href="#项目中配置了新的eslint规则，但是命令行依旧输出一堆的warning" class="headerlink" title="项目中配置了新的eslint规则，但是命令行依旧输出一堆的warning"></a>项目中配置了新的eslint规则，但是命令行依旧输出一堆的warning</h3><p>原因：create-react-app 中配置了 eslint-loader，先前运行时输出的warning会被缓存起来，如果配置新的rules，此时warning将依旧存在</p>
<p>解决办法：删除node_modules&#x2F;.cache&#x2F;eslint-loader</p>
<p>注意：配置新的rules后需要重启项目</p>
]]></content>
      <categories>
        <category>ESLint</category>
      </categories>
  </entry>
  <entry>
    <title>GIT基础用法</title>
    <url>/2022/06/27/GIT/index/</url>
    <content><![CDATA[<h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><h4 id="指定的commit应用于其他分支"><a href="#指定的commit应用于其他分支" class="headerlink" title="指定的commit应用于其他分支"></a>指定的commit应用于其他分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前分支 feat/test，commit为f，将f应用到master分支上</span></span><br><span class="line">&gt; git checkout master</span><br><span class="line">&gt; git cherry-pick f</span><br></pre></td></tr></table></figure>

<h4 id="指定的commit应用于其他分支-1"><a href="#指定的commit应用于其他分支-1" class="headerlink" title="指定的commit应用于其他分支"></a>指定的commit应用于其他分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前分支 feat/test，commit记录为 A、B、C(最新)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将B、C应用到master分支上</span></span><br><span class="line">&gt; git checkout master</span><br><span class="line">&gt; git cherry-pick A..C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将A、B、C应用到master分支上</span></span><br><span class="line">&gt; git checkout master</span><br><span class="line">&gt; git cherry-pick A^..C</span><br></pre></td></tr></table></figure>

<p><a href="https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html">参考</a></p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>清除新增的文件或新修改的代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean -<span class="built_in">df</span> <span class="comment"># 清除未被add和commit的新增的文件和文件夹</span></span><br><span class="line">git checkout -f <span class="comment"># 清除未被add和commit的文件（在原文件上做改动）</span></span><br><span class="line">git checkout -- src/test <span class="comment"># 清除src/test文件夹下的改动</span></span><br></pre></td></tr></table></figure>

<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>删除分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; git branch -D feature/temp <span class="comment"># 删除本地分支</span></span><br><span class="line">&gt; git push origin -d feature/temp <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure>

<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>将master上新的提交合并到自己的分支中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; git rebase origin/master</span><br><span class="line">&gt; git add -A <span class="comment"># 处理冲突，如果有</span></span><br><span class="line">&gt; git rebase --<span class="built_in">continue</span> <span class="comment">#  继续合并代码</span></span><br><span class="line">&gt; git add -A <span class="comment"># 继续处理冲突，如果有</span></span><br><span class="line">...</span><br><span class="line">&gt; git push -f</span><br></pre></td></tr></table></figure>

<h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset --soft commitId <span class="comment"># 撤销commit，回到暂存区（add是的状态）</span></span><br><span class="line">git reset . <span class="comment"># 撤销至工作区（未add时的状态）</span></span><br><span class="line">git reset filename <span class="comment"># 撤销指定文件的add至工作区</span></span><br></pre></td></tr></table></figure>

<h3 id="fetch-和-pull"><a href="#fetch-和-pull" class="headerlink" title="fetch 和 pull"></a>fetch 和 pull</h3><p>git pull 等价于 git fetch + git merge</p>
<p>git fetch：取回所有分支的更新</p>
<p>git merge：应用所有更新</p>
<p>git pull origin master：拉取远程master分支上的变更并且merge到本地的master分支上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; git checkout master <span class="comment"># 本地的master分支</span></span><br><span class="line">&gt; git fetch origin master <span class="comment"># 将origin/master上的变更拉取到本地的remotes/origin/master上</span></span><br><span class="line">&gt; git checkout origin/master</span><br><span class="line">&gt; git <span class="built_in">log</span> <span class="comment"># 可以查看到刚拉取到的新的变更</span></span><br><span class="line">&gt; git checkout master</span><br><span class="line">&gt; git merge origin/master <span class="comment"># 将本地的remotes/origin/master上新的变更merge到当前的master分支上</span></span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --oneline <span class="comment"># 查看链路</span></span><br></pre></td></tr></table></figure>

<h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><p>git revert -m 数值</p>
<ol>
<li>-m 选项接收的参数是一个数字，数字取值为 1 和 2，也就是 Merge 行里面列出来的第一个还是第二个，其含义用来保留某个分支</li>
<li>git revert 后revert的代码将无法再次合入，需要通过再次revert revert那次的commit才可以恢复代码</li>
</ol>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>branch: release 和 feat&#x2F;test</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># release（默认状态）</span></span><br><span class="line">a.txt </span><br><span class="line">|</span><br><span class="line">this is release default</span><br><span class="line"></span><br><span class="line">b.txt</span><br><span class="line">|</span><br><span class="line">this is release default</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># release（修改）</span></span><br><span class="line">m.txt</span><br><span class="line">|</span><br><span class="line">this is release change</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># feat/test（修改）(branch from release)</span></span><br><span class="line">a.txt</span><br><span class="line">|</span><br><span class="line">this is release default</span><br><span class="line">this is feat/test change</span><br><span class="line"></span><br><span class="line">c.txt </span><br><span class="line">|</span><br><span class="line">this is feat/test default</span><br></pre></td></tr></table></figure>

<p>操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; git checkout release</span><br><span class="line">&gt; git merge feat/test --no-ff</span><br><span class="line">&gt; git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit e0fec0044ad030af13dc6cb8def55ccc652e8f0e</span><br><span class="line">Merge: 8960fd8 df607b9</span><br><span class="line">Author: ...</span><br><span class="line">Date:   Tue Aug 30 20:18:22 2022 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">&#x27;feat/test&#x27;</span> into release</span><br><span class="line"></span><br><span class="line">commit df607b93c3057c7d5147a267965ab3cf64e2768b (feat/test)</span><br><span class="line">Author: ...</span><br><span class="line">Date:   Tue Aug 30 20:18:01 2022 +0800</span><br><span class="line"></span><br><span class="line">    chore: feat/test change</span><br><span class="line"></span><br><span class="line">commit 8960fd8e99dc2cdb54d3c44c0cfa9eda15a62ad7</span><br><span class="line">Author: ...</span><br><span class="line">Date:   Tue Aug 30 20:17:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    chore: release change</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销feat/test分支上的修改</span></span><br><span class="line">&gt; git revert df607b93c3057c7d5147a267965ab3cf64e2768b</span><br><span class="line">&gt; git push <span class="comment"># 此时release分支上只有release自己的改动，没有feat/test的修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者可以通过撤销merge时的commit来撤销改动</span></span><br><span class="line">&gt; git revert e0fec0044ad030af13dc6cb8def55ccc652e8f0e 8960fd8 <span class="comment"># 保留原修改，撤销feat/test的修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过git show查看修改和merge时的parent commit</span></span><br><span class="line">&gt; git show e0fec0044ad030af13dc6cb8def55ccc652e8f0e</span><br><span class="line"></span><br><span class="line">commit e0fec0044ad030af13dc6cb8def55ccc652e8f0e</span><br><span class="line">Merge: 8960fd8 df607b9</span><br><span class="line">Author: ...</span><br><span class="line">Date:   Tue Aug 30 20:18:22 2022 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">&#x27;feat/test&#x27;</span> into release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看修改信息</span></span><br><span class="line">&gt; git show 8960fd8</span><br><span class="line"></span><br><span class="line">commit 8960fd8e99dc2cdb54d3c44c0cfa9eda15a62ad7</span><br><span class="line">Author: ...</span><br><span class="line">Date:   Tue Aug 30 20:17:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    chore: release change</span><br><span class="line"></span><br><span class="line">diff --git a/m.txt b/m.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..c33931d</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/m.txt</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+this is release change</span><br><span class="line">\ No newline at end of file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用git reset撤销merge</span></span><br><span class="line">git reset --hard df607b93c3057c7d5147a267965ab3cf64e2768b <span class="comment"># 此时8960fd8e99dc2cdb54d3c44c0cfa9eda15a62ad7上的提交时丢失的</span></span><br><span class="line">git <span class="built_in">log</span> --graph --oneline <span class="comment"># 查看链路</span></span><br><span class="line"></span><br><span class="line">*   e0fec00 (HEAD -&gt; release, origin/release) Merge branch <span class="string">&#x27;feat/test1&#x27;</span> into release</span><br><span class="line">|\  </span><br><span class="line">| * df607b9 (feat/test1) chore: feat/test1 change</span><br><span class="line">* | 8960fd8 chore: release change</span><br><span class="line">|/  </span><br><span class="line">* fc1a13f (chore/test1) chore: <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 使用reset后链路变成了df607b9-fc1a13f，8960fd8在主干上，而不在df607b9所在的链路上</span></span><br></pre></td></tr></table></figure>

<h3 id="no-fast-forward-模式"><a href="#no-fast-forward-模式" class="headerlink" title="no-fast-forward 模式"></a>no-fast-forward 模式</h3><p>参数：–no-ff</p>
<p>将两个分支上各自的修改merge后形成一个新的commit，并且各自的链路上有着各自修改的commit记录。注意：此时执行reset –hard操作需要注意各自链路上的commit是否会被丢失</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*   e0fec00（merge）</span><br><span class="line">|\  </span><br><span class="line">| * df607b9（featb)</span><br><span class="line">* | 8960fd8</span><br><span class="line">|/  </span><br><span class="line">* fc1a13f（feata)</span><br></pre></td></tr></table></figure>

<p>此时是将 feata 分支上的 8960fd8 的 commit 和 featb 分支上的 df607b9 的 commit 合并成一个新的commit e0fec00，执行 git reset –hard df607b9 后，commit 8960fd8 将会丢失。</p>
]]></content>
      <categories>
        <category>GIT</category>
      </categories>
  </entry>
  <entry>
    <title>HTML基础知识</title>
    <url>/2022/05/27/HTML/index/</url>
    <content><![CDATA[<h3 id="getElementById-和-querySelector"><a href="#getElementById-和-querySelector" class="headerlink" title="getElementById 和 querySelector"></a>getElementById 和 querySelector</h3><p>querySelector中的选择器标识符不能以数字、两个连字符或一个连字符后跟一个数字开头。而getElementById则可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// querySelector的替代方式</span></span><br><span class="line"><span class="keyword">const</span> myId = <span class="number">22</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`[id=&quot;<span class="subst">$&#123;myId&#125;</span>&quot;]`</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/37270787/uncaught-syntaxerror-failed-to-execute-queryselector-on-document">参考</a></p>
<h3 id="hr元素设置颜色"><a href="#hr元素设置颜色" class="headerlink" title="hr元素设置颜色"></a>hr元素设置颜色</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hr &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>开发技巧</title>
    <url>/2022/06/06/JavaScript/skill/</url>
    <content><![CDATA[<h3 id="使用clip隐藏定位元素"><a href="#使用clip隐藏定位元素" class="headerlink" title="使用clip隐藏定位元素"></a>使用clip隐藏定位元素</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">el.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span><br><span class="line">el.<span class="property">style</span>.<span class="property">top</span> = <span class="number">0</span>;</span><br><span class="line">el.<span class="property">style</span>.<span class="property">clip</span> = <span class="string">&#x27;rect(0, 0, 0, 0)&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="剔除html元素的换行和空格"><a href="#剔除html元素的换行和空格" class="headerlink" title="剔除html元素的换行和空格"></a>剔除html元素的换行和空格</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">htmlText.<span class="title function_">replace</span>(<span class="regexp">/&gt;\s+&lt;/g</span>, <span class="string">&#x27;&gt;&lt;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\r|\n|\r\n/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">trim</span>();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>复制内容</title>
    <url>/2022/06/06/JavaScript/clipboard/</url>
    <content><![CDATA[<h3 id="复制canvas图片和文本"><a href="#复制canvas图片和文本" class="headerlink" title="复制canvas图片和文本"></a>复制canvas图片和文本</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注：</span></span><br><span class="line"><span class="comment"> * 1. 此方法具有兼容性问题，部分浏览器和低版本浏览器不支持</span></span><br><span class="line"><span class="comment"> * 2. Chrome 浏览器规定，只有 HTTPS 协议或localhost的页面才能使用navigator.clipboard这个API</span></span><br><span class="line"><span class="comment"> * 3. safari中只有https环境才能使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 复制canvas图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">copyCanvasImg</span> = <span class="keyword">async</span> (<span class="params">canvasEl: HTMLCanvasElement</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ClipboardItem</span> &amp;&amp; navigator.<span class="property">clipboard</span>.<span class="property">write</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">blob</span>: <span class="title class_">Blob</span> = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      canvasEl.<span class="title function_">toBlob</span>(resolve);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">write</span>([<span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">ClipboardItem</span>(&#123; [blob.<span class="property">type</span>]: blob &#125;)]);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;复制成功！&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;复制失败！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文本</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">copyText</span> = <span class="keyword">async</span> (<span class="params">text: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">clipboard</span>.<span class="property">writeText</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;复制成功！&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;复制失败！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyCanvasImgDemo</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;&#123;&#125;&gt; = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> canvasRef = useRef&lt;<span class="title class_">HTMLCanvasElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">drawImg</span>()</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">drawImg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> context = canvasRef.<span class="property">current</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">crossOrigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line">    img.<span class="property">src</span> = <span class="built_in">require</span>(<span class="string">&#x27;../../images/test.jpeg&#x27;</span>);</span><br><span class="line">    img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">copyImg</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">copyCanvasImg</span>(canvasRef.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">&#123;canvasRef&#125;</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;copyImg&#125;</span>&gt;</span>复制图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CopyCanvasImgDemo</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用document-execCommand-‘copy’-实现复制"><a href="#使用document-execCommand-‘copy’-实现复制" class="headerlink" title="使用document.execCommand(‘copy’)实现复制"></a>使用document.execCommand(‘copy’)实现复制</h3><p>注：由于安全性问题，document.execCommand已废弃，建议使用navigator.clipboard替代</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此动作不可自动执行，必须存在页面交互才可</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">copy</span> = (<span class="params">node: HTMLElement</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selection = <span class="variable language_">document</span>.<span class="title function_">getSelection</span>();</span><br><span class="line">  <span class="keyword">const</span> range = <span class="variable language_">document</span>.<span class="title function_">createRange</span>();</span><br><span class="line">  range.<span class="title function_">selectNodeContents</span>(node); <span class="comment">// 选择整个节点及其子节点</span></span><br><span class="line">  <span class="comment">// range.selectNode(node); // 选择子节点</span></span><br><span class="line">  selection.<span class="title function_">removeAllRanges</span>(); <span class="comment">// 此操作必须执行，否则将复制失败</span></span><br><span class="line">  selection.<span class="title function_">addRange</span>(range);</span><br><span class="line">  <span class="keyword">const</span> successful = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>); <span class="comment">// </span></span><br><span class="line">  <span class="keyword">if</span> (successful) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;复制成功！&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;复制失败！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="复制html内容"><a href="#复制html内容" class="headerlink" title="复制html内容"></a>复制html内容</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="string">&#x27;&lt;div&gt;this is a test div&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data], &#123;type : <span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line">navigator.<span class="property">clipboard</span>.<span class="title function_">write</span>([<span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">ClipboardItem</span>(&#123; [blob.<span class="property">type</span>]: blob &#125;)])</span><br></pre></td></tr></table></figure>

<p>注意：写入剪贴板的html内容直接粘贴时是为空的，需要粘贴在contenteditable的元素中才可以正常显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span> <span class="attr">style</span>=<span class="string">&quot;width:300px;height:300px;background:pink;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.stefanjudis.com/notes/a-clipboard-magic-trick-how-to-use-different-mime-types-with-the-clipboard/">参考</a></p>
<h3 id="构造数据粘贴至table中"><a href="#构造数据粘贴至table中" class="headerlink" title="构造数据粘贴至table中"></a>构造数据粘贴至table中</h3><p>前提：从现有的table复制数据出来，通过getClipboardData获取数据，对其进行分析，再构造需要的html格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例：粘贴两列多行数据 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getWriteData()&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">test1</span>: <span class="string">&#x27;1111&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">test2</span>: <span class="string">&#x27;2222&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">trimHtml</span>(<span class="params">html</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> html.<span class="title function_">replace</span>(<span class="regexp">/&gt;\s+&lt;/g</span>, <span class="string">&#x27;&gt;&lt;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\r|\n|\r\n/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">writeMultipleLine</span>(<span class="params">html</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 清空</span></span></span><br><span class="line"><span class="language-javascript">  navigator.<span class="property">clipboard</span>.<span class="title function_">write</span>([</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">ClipboardItem</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#x27;text/plain&#x27;: new Blob([text], &#123; type: &#x27;text/plain&#x27; &#125;),</span></span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;text/html&#x27;</span>: <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title function_">trimHtml</span>(html)], &#123; <span class="attr">type</span>: <span class="string">&#x27;text/html&#x27;</span> &#125;),</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  ]);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getHTML</span> (trStr) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> html = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;meta charset=&quot;utf-8&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;table&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;colgroup&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;col width=&quot;334&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;col width=&quot;427&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;/colgroup&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;tbody&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            <span class="subst">$&#123;trStr&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;/tbody&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/table&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> html</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getTr</span>(<span class="params">key, value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> template = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;tr&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;td style=&quot;border: 1px solid rgb(222, 224, 227);&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div style=&quot;white-space: pre;&quot;&gt;<span class="subst">$&#123;key&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;td style=&quot;border: 1px solid rgb(222, 224, 227);&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div style=&quot;white-space: pre;&quot;&gt;<span class="subst">$&#123;value&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/tr&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  `</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> template</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getWriteData</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">writeMultipleLine</span>(<span class="title function_">getHTML</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(data).<span class="title function_">map</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> <span class="title function_">getTr</span>(key, value)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))) <span class="comment">// 自己构造的html数据</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>clipboardData: 操作剪贴板中的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">clipboardData</span></span><br><span class="line">event.<span class="property">clipboardData</span></span><br></pre></td></tr></table></figure>

<p>相关的npm包：copy-to-clipboard</p>
<p><a href="https://www.ruanyifeng.com/blog/2021/01/clipboard-api.html">参考文档1</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1780940">参考文档2</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2022/05/27/JavaScript/sort/</url>
    <content><![CDATA[<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * chrome和firefox中返回值都是 1,2,3,4,5</span></span><br><span class="line"><span class="comment"> * 但是两者的处理逻辑正好相反：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * chrome：</span></span><br><span class="line"><span class="comment"> * a代表后一个值，b代表前一个值，返回 -1 时交换顺序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * firefox：</span></span><br><span class="line"><span class="comment"> * a代表前一个值，b代表后一个值，返回 1 时交换顺序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 所以在结果上表现无差异，但是如果内部有一些判断逻辑，则可能会出现结果不一致的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>, <span class="string">&#x27;df&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;eg&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="property">length</span> &gt; b.<span class="property">length</span> &amp;&amp; a.<span class="title function_">includes</span>(b)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? -<span class="number">1</span> : <span class="number">1</span>; <span class="comment">// 默认排序（按照ASCII的大小比较的）</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// chrome: [&#x27;ab&#x27;, &#x27;abc&#x27;, &#x27;bc&#x27;, &#x27;abcd&#x27;, &#x27;df&#x27;, &#x27;eg&#x27;]</span></span><br><span class="line"><span class="comment">// firefox: [ &quot;ab&quot;, &quot;bc&quot;, &quot;abc&quot;, &quot;abcd&quot;, &quot;df&quot;, &quot;eg&quot; ]</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">chrome: 排序过程</span></span><br><span class="line"><span class="comment">bc abc -&gt; abc bc</span></span><br><span class="line"><span class="comment">df bc -&gt; abc bc df</span></span><br><span class="line"><span class="comment">ab df -&gt; abc bc ab df</span></span><br><span class="line"><span class="comment">ab bc -&gt; abc ab bc df</span></span><br><span class="line"><span class="comment">ab abc -&gt; ab abc bc df</span></span><br><span class="line"><span class="comment">eg bc -&gt; ab abc bc eg df</span></span><br><span class="line"><span class="comment">eg df -&gt; ab abc bc df eg</span></span><br><span class="line"><span class="comment">abcd bc -&gt; ab abc bc abcd df eg</span></span><br><span class="line"><span class="comment">abcd eg -&gt; ab abc bc abcd df eg</span></span><br><span class="line"><span class="comment">abcd df -&gt; ab abc bc abcd df eg</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">firefox: 排序过程</span></span><br><span class="line"><span class="comment">abc bc -&gt; bc abc</span></span><br><span class="line"><span class="comment">abc df -&gt; bc abc df</span></span><br><span class="line"><span class="comment">df ab -&gt; bc abc ab df</span></span><br><span class="line"><span class="comment">abc ab -&gt; bc ab abc df</span></span><br><span class="line"><span class="comment">bc ab -&gt; ab bc abc df</span></span><br><span class="line"><span class="comment">df eg -&gt; ab bc abc df eg</span></span><br><span class="line"><span class="comment">eg abcd -&gt; ab bc abc df abcd eg</span></span><br><span class="line"><span class="comment">df abcd -&gt; ab bc abc abcd df eg</span></span><br><span class="line"><span class="comment">abc abcd -&gt; ab bc abc abcd df eg</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 平均时间复杂度：O(n^2)</span></span><br><span class="line"><span class="comment"> * 有序情况下：O(n)，即在设置flag的情况下，发生数组有序则终止循环</span></span><br><span class="line"><span class="comment"> * 逆序情况下：n-1 + n-2 + .... 1 = n*(n - 1)/2，即为 O(n ^ 2)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment"> * 两个临时变量（交换时的临时变量、flag），只需要常量级的临时空间，空间复杂度为 O(1)</span></span><br><span class="line"><span class="comment"> * 稳定性：稳定（即对于两个相等的元素，排序后的顺序与之前的顺序一致）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Mac常用快捷键</title>
    <url>/2022/07/05/Mac/keyboard/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>截屏和录制屏幕</td>
<td>⌘ + shift + 5</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>编辑浏览器内容</title>
    <url>/2022/07/05/JavaScript/copy/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">designMode</span> = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">contentEditable</span> = <span class="literal">true</span>;</span><br><span class="line">(<span class="function">(<span class="params">tags</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">remove</span> (tag) &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = <span class="variable language_">window</span>.<span class="title function_">getEventListeners</span>(tag);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(listeners).<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> eventName <span class="keyword">in</span> listeners) &#123;</span><br><span class="line">        listeners[eventName].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          tag.<span class="title function_">removeEventListener</span>(eventName, item.<span class="property">listener</span>, <span class="literal">false</span>)</span><br><span class="line">          tag.<span class="title function_">removeEventListener</span>(eventName, item.<span class="property">listener</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="variable language_">document</span>);</span><br><span class="line">  (<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="variable language_">document</span>)))).<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span> name.<span class="title function_">indexOf</span>(<span class="string">&#x27;on&#x27;</span>) === <span class="number">0</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>[name] = <span class="literal">null</span>;</span><br><span class="line">    tags.<span class="title function_">forEach</span>(<span class="function"><span class="params">tag</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">remove</span>(tag)</span><br><span class="line">      tag[name] = <span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>)));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>小程序</title>
    <url>/2022/08/08/Miniprogram/index/</url>
    <content><![CDATA[<h3 id="scroll-view中设置sticky无效"><a href="#scroll-view中设置sticky无效" class="headerlink" title="scroll-view中设置sticky无效"></a>scroll-view中设置sticky无效</h3><p>解决办法：给scroll-view的子元素包裹一层view</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;scroll-view scroll-y&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span> // 设置sticky的元素</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure>

<h3 id="rich-text渲染svg小图片"><a href="#rich-text渲染svg小图片" class="headerlink" title="rich-text渲染svg小图片"></a>rich-text渲染svg小图片</h3><p>将图片作为元素的backgroud进行设置</p>
<ol>
<li>先获取svg的html代码</li>
<li>使用encodeURIComponent对齐进行编码</li>
<li>拼接：data:image&#x2F;svg+xml</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- svg --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M12 23c6.075 0 11-4.925 11-11S18.075 1 12 1 1 5.925 1 12s4.925 11 11 11Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#3370ff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M13 7.5a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-2 4v4h-.5a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2H13c0-.667 0-1.333.002-2 0-1.001.002-2.002 0-3.004a.998.998 0 0 0-.998-.996H11a1 1 0 1 0 0 2Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:url(&#x27;data:image/svg+xml,%3Csvg%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12%2023c6.075%200%2011-4.925%2011-11S18.075%201%2012%201%201%205.925%201%2012s4.925%2011%2011%2011Z%22%20fill%3D%22%233370ff%22%3E%3C%2Fpath%3E%3Cpath%20d%3D%22M13%207.5a1%201%200%201%200-2%200%201%201%200%200%200%202%200Zm-2%204v4h-.5a1%201%200%201%200%200%202h3a1%201%200%201%200%200-2H13c0-.667%200-1.333.002-2%200-1.001.002-2.002%200-3.004a.998.998%200%200%200-.998-.996H11a1%201%200%201%200%200%202Z%22%20fill%3D%22%23fff%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E&#x27;) no-repeat;background-size:100% 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>miniprogram</category>
      </categories>
  </entry>
  <entry>
    <title>Mobx基础用法</title>
    <url>/2022/07/05/Mobx/index/</url>
    <content><![CDATA[<p>当前版本：”mobx”: “^6.6.1”, “mobx-react”: “^7.5.1”</p>
<h3 id="react中引入mobx"><a href="#react中引入mobx" class="headerlink" title="react中引入mobx"></a>react中引入mobx</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn add mobx mobx-react</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index</span></span><br><span class="line"><span class="keyword">import</span> &#123; action, observable, makeObservable &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppStore</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">makeObservable</span>(<span class="variable language_">this</span>); <span class="comment">// 注意: mobx&gt;6版本时需要使用</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@observable</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@action</span></span><br><span class="line">  setName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this.name&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appStore = <span class="keyword">new</span> <span class="title class_">AppStore</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> appStore;</span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Provider和inject配合使用</span></span><br><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteObject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">&#x27;./router.config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> appStore <span class="keyword">from</span> <span class="string">&#x27;$store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">appStore</span>=<span class="string">&#123;appStore&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;useRoutes(routes as RouteObject[])&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class组件用法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> appStore, &#123; <span class="title class_">AppStore</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;$store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IDemoProps</span> &#123;</span><br><span class="line">  appStore?: <span class="title class_">AppStore</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject</span>(<span class="string">&#x27;appStore&#x27;</span>)</span><br><span class="line"><span class="meta">@observer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;<span class="title class_">IDemoProps</span>&gt; &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; appStore &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, setName &#125; = appStore;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>name: &#123; name &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setName&#125;</span>&gt;</span>setName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Function组件用法1</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppStore</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;$store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IDemoProps</span> &#123;</span><br><span class="line">  appStore?: <span class="title class_">AppStore</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">IDemoProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; appStore &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, setName &#125; = appStore;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>name: &#123; name &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setName&#125;</span>&gt;</span>setName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">inject</span>(<span class="string">&#x27;appStore&#x27;</span>)(<span class="title function_">observer</span>(<span class="title class_">Demo</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function组件用法2</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> appStore <span class="keyword">from</span> <span class="string">&#x27;$store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; name, setName &#125; = appStore;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>name: &#123; name &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setName&#125;</span>&gt;</span>setName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">observer</span>(<span class="title class_">Demo</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mobx</category>
      </categories>
  </entry>
  <entry>
    <title>包管理工具</title>
    <url>/2022/08/10/Package/index/</url>
    <content><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装指定版本的包</span></span><br><span class="line">npm install package@version -D</span><br><span class="line"><span class="comment"># -S 等价于 --save，安装至dependencies，-D 等价于 --save-dev，安装至devDependencies</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最新版本</span></span><br><span class="line">npm view package version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有版本</span></span><br><span class="line">npm view package versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新版本</span></span><br><span class="line">npm update package -D <span class="comment"># 根据版本标识更新，若package.json为^，则无法更新大版本，只能通过npm install重新安装最新版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看哪些包有更新（npm v6.x）</span></span><br><span class="line">npm outdated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定别名</span></span><br><span class="line">npm i aliasname@npm:package <span class="comment"># 例：npm i lodash2@npm:loadsh@2.2.1</span></span><br></pre></td></tr></table></figure>

<h3 id="包版本"><a href="#包版本" class="headerlink" title="包版本"></a>包版本</h3><p>x.y.z: 第一个数字是主版本、第二个数字是次版本、第三个数字是补丁版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`^`</span>：只会执行不更改最左边非零数字的更新。 如果写入的是 ^<span class="number">0.13</span><span class="number">.0</span>，则当运行 npm update 时，</span><br><span class="line">可以更新到 <span class="number">0.13</span><span class="number">.1</span>、<span class="number">0.13</span><span class="number">.2</span> 等，但不能更新到 <span class="number">0.14</span><span class="number">.0</span> 或更高版本。 如果写入的是 ^<span class="number">1.13</span><span class="number">.0</span>，</span><br><span class="line">则当运行 npm update 时，可以更新到 <span class="number">1.13</span><span class="number">.1</span>、<span class="number">1.14</span><span class="number">.0</span> 等，但不能更新到 <span class="number">2.0</span><span class="number">.0</span> 或更高版本。</span><br><span class="line"><span class="string">`~`</span>：如果写入的是 〜<span class="number">0.13</span><span class="number">.0</span>，则当运行 npm update 时，会更新到补丁版本：即 <span class="number">0.13</span><span class="number">.1</span> 可以，但 <span class="number">0.14</span><span class="number">.0</span> 不可以。</span><br><span class="line"><span class="string">`&gt;`</span>：接受高于指定版本的任何版本。</span><br><span class="line"><span class="string">`&gt;=`</span>：接受等于或高于指定版本的任何版本。</span><br><span class="line"><span class="string">`&lt;=`</span>：接受等于或低于指定版本的任何版本。</span><br><span class="line"><span class="string">`&lt;`</span>：接受低于指定版本的任何版本。</span><br><span class="line"><span class="string">`=`</span>：接受确切的版本。</span><br><span class="line"><span class="string">`-`</span>：接受一定范围的版本。例如：<span class="number">2.1</span><span class="number">.0</span> - <span class="number">2.6</span><span class="number">.2</span>。</span><br><span class="line"><span class="string">`||`</span>：组合集合。例如 &lt; <span class="number">2.1</span> || &gt; <span class="number">2.6</span>。</span><br></pre></td></tr></table></figure>

<h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2>]]></content>
      <categories>
        <category>package</category>
      </categories>
  </entry>
  <entry>
    <title>React的Context</title>
    <url>/2022/07/21/React/context/</url>
    <content><![CDATA[<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><ol>
<li>作用：提供了组件间共享值的方式，不必通过props层层传递</li>
<li>缺点：Provider中的value的变更（浅比较）会导致所有Consumer中的组件重渲染。</li>
</ol>
<h3 id="创建Context"><a href="#创建Context" class="headerlink" title="创建Context"></a>创建Context</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(defaultValue);</span><br><span class="line"><span class="comment">// 组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效</span></span><br></pre></td></tr></table></figure>

<h3 id="提供值"><a href="#提供值" class="headerlink" title="提供值"></a>提供值</h3><p>注：value设置为undefined不会使defaultValue生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当 value 值发生变化时，内部所有消费组件都会重新渲染</span></span><br><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Provider</span> value=&#123;<span class="comment">/* 某个值 */</span>&#125;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="消费值"><a href="#消费值" class="headerlink" title="消费值"></a>消费值</h3><p>方式一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">value</span> =&gt;</span> <span class="comment">/* 基于 context 值进行渲染*/</span>&#125;</span><br><span class="line">&lt;/<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br></pre></td></tr></table></figure>

<p>方式二：在class组件中使用</p>
<p>挂载在 class 上的 contextType 属性可以赋值为由 React.createContext() 创建的 Context 对象。此属性可以让你使用 this.context 来获取最近 Context 上的值。你可以在任何生命周期中访问到它，包括 render 函数中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property">contextType</span> = <span class="title class_">MyContext</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二，支持static语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = <span class="title class_">MyContext</span>;</span><br><span class="line"></span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式三：hooks使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>); <span class="comment">// 当value值更新时，该 Hook 会触发重渲染</span></span><br><span class="line"><span class="comment">// 注：调用了 useContext 的组件总会在 context 值变化时重新渲染。</span></span><br></pre></td></tr></table></figure>

<h3 id="更新值"><a href="#更新值" class="headerlink" title="更新值"></a>更新值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">theme</span>: <span class="title class_">Theme</span>.<span class="property">dark</span>,</span><br><span class="line">  <span class="attr">changeTheme</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供</span></span><br><span class="line">state = &#123;</span><br><span class="line">  <span class="attr">theme</span>: <span class="title class_">Theme</span>.<span class="property">light</span>,</span><br><span class="line">  <span class="attr">changeTheme</span>: <span class="variable language_">this</span>.<span class="property">changeTheme</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeTheme = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">theme</span>:</span><br><span class="line">      state.<span class="property">theme</span> === <span class="title class_">Theme</span>.<span class="property">dark</span></span><br><span class="line">        ? <span class="title class_">Theme</span>.<span class="property">light</span></span><br><span class="line">        : <span class="title class_">Theme</span>.<span class="property">dark</span>,</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Content</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;(&#123;theme, changeTheme&#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;changeTheme&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundColor:</span> <span class="attr">theme.background</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Change Theme</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  )&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// devtools中名称展示</span></span><br><span class="line"><span class="title class_">MyContext</span>.<span class="property">displayName</span> = <span class="string">&#x27;MyDisplayName&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="减少context值变化触发重渲染"><a href="#减少context值变化触发重渲染" class="headerlink" title="减少context值变化触发重渲染"></a>减少context值变化触发重渲染</h2><ol>
<li>拆分context，对不需要重复渲染的那个模块仅使用对应的那部分Context</li>
<li>增加一个中间组件，将渲染的组件使用memo缓存起来</li>
<li>将组件的render返回值使用useMemo包裹</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> theme = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="comment">// The rest of your rendering logic</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ExpensiveTree</span> <span class="attr">className</span>=<span class="string">&#123;theme&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> appContextValue = <span class="title function_">useContext</span>(<span class="title class_">AppContext</span>);</span><br><span class="line">  <span class="keyword">let</span> theme = appContextValue.<span class="property">theme</span>; <span class="comment">// Your &quot;selector&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ThemedButton</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemedButton</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; theme &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// The rest of your rendering logic</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ExpensiveTree</span> <span class="attr">className</span>=<span class="string">&#123;theme&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> appContextValue = <span class="title function_">useContext</span>(<span class="title class_">AppContext</span>);</span><br><span class="line">  <span class="keyword">let</span> theme = appContextValue.<span class="property">theme</span>; <span class="comment">// Your &quot;selector&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// The rest of your rendering logic</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ExpensiveTree</span> <span class="attr">className</span>=<span class="string">&#123;theme&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;, [theme])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/facebook/react/issues/15156">详见</a></p>
<h2 id="组件组合"><a href="#组件组合" class="headerlink" title="组件组合"></a>组件组合</h2><p>可以用来减少props的层层传递的数量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Level1</span> name=&#123;name&#125; age=&#123;age&#125; /&gt;</span><br><span class="line"><span class="comment">// 渲染出</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Level2</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">age</span>=<span class="string">&#123;age&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// 渲染出</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Level3</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">age</span>=<span class="string">&#123;age&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// 渲染出</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;: &#123;age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 替代方案</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Level1</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> com = (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;: &#123;age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">Level2</span> <span class="attr">com</span>=<span class="string">&#123;com&#125;</span> /&gt;</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Level2</span> com=&#123;com&#125; /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Level3</span> <span class="attr">com</span>=<span class="string">&#123;com&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// 渲染出</span></span><br><span class="line">&#123; props.<span class="property">com</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React基础知识</title>
    <url>/2022/05/27/React/index/</url>
    <content><![CDATA[<h3 id="ReactDOM-render-和-ReactDOM-createPortal的区别"><a href="#ReactDOM-render-和-ReactDOM-createPortal的区别" class="headerlink" title="ReactDOM.render 和 ReactDOM.createPortal的区别"></a>ReactDOM.render 和 ReactDOM.createPortal的区别</h3><p>1.ReactDOM.render(element, container[, callback])</p>
<p>element：React元素<br>container：dom元素<br>callback：回调函数，该回调将在组件被渲染或更新之后被执行</p>
<p>2.ReactDOM.createPortal(child, container)</p>
<p>child：React元素<br>container：dom元素</p>
<p>区别：使用render渲染元素，点击元素时事件不会冒泡到根元素上，而使用createPortal渲染元素，点击元素时，包裹该元素的父级元素可以捕获到该点击事件。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Css</title>
    <url>/2022/08/04/React/css/</url>
    <content><![CDATA[<h2 id="styleName"><a href="#styleName" class="headerlink" title="styleName"></a>styleName</h2><p>使用 react-css-modules 识别页面上设置的styleName，可配置将其解析成hash形式</p>
<h3 id="当做组件的props传递"><a href="#当做组件的props传递" class="headerlink" title="当做组件的props传递"></a>当做组件的props传递</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Test</span> <span class="attr">styleName</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">// 经过 react-css-modules 编译成了一个字符串作为className传递给子组件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Test.tsx</span></span><br><span class="line"><span class="comment">// 使用 props.className接收组件的styleName</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="variable constant_">FC</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TestProps</span> &#123;</span><br><span class="line">  styleName?: <span class="built_in">string</span>; <span class="comment">// 用于识别ts</span></span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Test</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">TestProps</span>&gt; = (props) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; className &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span>this is a test example<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>常用Shell命令</title>
    <url>/2022/07/21/Shell/index/</url>
    <content><![CDATA[<h3 id="使用-或"><a href="#使用-或" class="headerlink" title="使用 - 或 :-"></a>使用 - 或 :-</h3><p>当值未设置时使用默认值，否则使用当前值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#echo hi</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;value&quot;</span></span><br><span class="line">b=<span class="variable">$&#123;a-&quot;default&quot;&#125;</span> <span class="comment"># 也可使用:-，即：等价于：b=$&#123;a:-&quot;default&quot;&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line"><span class="built_in">unset</span> a</span><br><span class="line">c=<span class="variable">$&#123;a-&quot;default&quot;&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$c</span></span><br></pre></td></tr></table></figure>

<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux use</span></span><br><span class="line">. /etc/profile <span class="comment"># is the same as source /etc/profile</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript常用语法</title>
    <url>/2022/06/14/TypeScript/index/</url>
    <content><![CDATA[<h3 id="keyof-和-key-in"><a href="#keyof-和-key-in" class="headerlink" title="keyof 和 key in"></a>keyof 和 key in</h3><p>key in 用于取联合类型的值</p>
<p>keyof 是取 对象的键，可以是interface，也可以是type</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Info</span> = keyof <span class="title class_">Person</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type Info = &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = <span class="string">&#x27;dog&#x27;</span> | <span class="string">&#x27;cat&#x27;</span> | <span class="string">&#x27;bird&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Test1</span> = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> <span class="title class_">Animal</span>]: &#123;</span><br><span class="line">    <span class="attr">weight</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type Test1 = &#123;</span></span><br><span class="line"><span class="comment">  dog: &#123;</span></span><br><span class="line"><span class="comment">    weight: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">  cat: &#123;</span></span><br><span class="line"><span class="comment">    weight: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">  bird: &#123;</span></span><br><span class="line"><span class="comment">    weight: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">不可使用interface，否则报错：A mapped type may not declare properties or methods</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Test2</span> = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> keyof <span class="title class_">Person</span>]: <span class="built_in">string</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type Test2 = &#123;</span></span><br><span class="line"><span class="comment">  name: string[];</span></span><br><span class="line"><span class="comment">  age: string[];</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TestType</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T = keyof <span class="title class_">TestType</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type T = &#x27;a&#x27; | &#x27;b&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用key in指定多个可选类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">  [key <span class="keyword">in</span></span><br><span class="line">    | <span class="string">&#x27;name&#x27;</span></span><br><span class="line">    | <span class="string">&#x27;age&#x27;</span></span><br><span class="line">    | <span class="string">&#x27;year&#x27;</span></span><br><span class="line">  ]?: <span class="title class_">Data</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等价于：</span></span><br><span class="line"><span class="comment">type PersonType = &#123;</span></span><br><span class="line"><span class="comment">  name?: Data | undefined;</span></span><br><span class="line"><span class="comment">  age?: Data | undefined;</span></span><br><span class="line"><span class="comment">  year?: Data | undefined;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IObj</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON.stringify中的对象无法被识别，因为It&#x27;s a runtime issue, and type checking is for compile time</span></span><br><span class="line"><span class="comment"> * 所以需要手动指定JSON.parse后的对象的类型，即便JSON.stringify中的对象中的类型存在问题也无法被识别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">IObj</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span>&#125;));</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = obj;</span><br></pre></td></tr></table></figure>

<h3 id="document-querySelector"><a href="#document-querySelector" class="headerlink" title="document.querySelector"></a>document.querySelector</h3><p>指定类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testEl = <span class="variable language_">document</span>.<span class="property">querySelector</span>&lt;<span class="title class_">HTMLDivElement</span>&gt;(<span class="string">&#x27;.test&#x27;</span>); <span class="comment">// 不指定时类型为HTMLElement</span></span><br></pre></td></tr></table></figure>

<h3 id="filter-Boolean"><a href="#filter-Boolean" class="headerlink" title="filter(Boolean)"></a>filter(Boolean)</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不能推断出真实的数据类型</span></span><br><span class="line"><span class="keyword">var</span> s = [<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">false</span>].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>) <span class="comment">// var s: (number | boolean | null)[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决办法</span></span><br><span class="line">s.<span class="title function_">filter</span>((val): val is <span class="built_in">number</span> =&gt; <span class="title class_">Boolean</span>(val)) <span class="comment">// var s: number[]</span></span><br></pre></td></tr></table></figure>

<h3 id="is-和-as"><a href="#is-和-as" class="headerlink" title="is 和 as"></a>is 和 as</h3><p>is：类型保护</p>
<p>as：类型断言</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>VSCode配置</title>
    <url>/2022/06/10/VSCode/index/</url>
    <content><![CDATA[<h3 id="配置code命令"><a href="#配置code命令" class="headerlink" title="配置code命令"></a>配置code命令</h3><p>command + shift + p，输入 install，选择：Install ‘code’ command in PATH</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行输入</span></span><br><span class="line">&gt; code test.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
  </entry>
  <entry>
    <title>Node基础用法</title>
    <url>/2022/07/22/Node/index/</url>
    <content><![CDATA[<h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><h3 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flags: &#x27;a&#x27; 表示打开文件进行追加。 如果文件不存在，则创建该文件。</span></span><br><span class="line"><span class="keyword">const</span> logFile = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;out.log&#x27;</span>, &#123; <span class="attr">flags</span>: <span class="string">&#x27;a&#x27;</span> &#125;);</span><br><span class="line">logFile.<span class="title function_">write</span>(util.<span class="property">format</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="string">&#x27;内容1&#x27;</span>, <span class="string">&#x27;内容2&#x27;</span>]]) + <span class="string">&#x27;\n&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>Webpack基础知识</title>
    <url>/2022/05/27/Webpack/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
  </entry>
  <entry>
    <title>loader</title>
    <url>/2022/08/10/Webpack/loader/</url>
    <content><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol>
<li>解析方式：从右至左，从下到上</li>
<li>使用webpack配置loader相比内联方式的优点：代码量更少、出错时更容易定位</li>
</ol>
]]></content>
      <categories>
        <category>loader</category>
      </categories>
  </entry>
  <entry>
    <title>plugin</title>
    <url>/2022/08/10/Webpack/plugin/</url>
    <content><![CDATA[<h3 id="svgr-x2F-webpack"><a href="#svgr-x2F-webpack" class="headerlink" title="@svgr&#x2F;webpack"></a>@svgr&#x2F;webpack</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：此处的写法需要禁用eslint的校验</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line import/no-webpack-loader-syntax</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Logo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@svgr/webpack!../../../logo.svg&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>将svg图片作为组件引入</p>
<p>svg图片需要经过 file-loader 和 @svgr&#x2F;webpack loader的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack5+</span></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(svg)$/i</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">  <span class="attr">parser</span>: &#123;</span><br><span class="line">    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">4</span> * <span class="number">1024</span>, <span class="comment">// 4kb</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/react-app-env.d.ts</span></span><br><span class="line"><span class="comment">// ts声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.svg&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">content</span>: <span class="title class_">React</span>.<span class="property">FunctionComponent</span>&lt;<span class="title class_">React</span>.<span class="property">SVGProps</span>&lt;</span><br><span class="line">  <span class="title class_">SVGSVGElement</span>&gt;&gt;;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;@svgr/webpack&#x27;</span>),</span><br><span class="line">      <span class="attr">options</span>: &#123; <span class="attr">icon</span>: <span class="literal">true</span> &#125;, <span class="comment">// 将icon的单位转化为em，使其可以通过设置fontSize控制大小</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Plus</span> <span class="keyword">from</span> <span class="string">&#x27;$assets/plus.svg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Plus</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span> &#x27;<span class="attr">40px</span>&#x27;, <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27;&#125;&#125; <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill=&quot;currentColor&quot;设置后，可以通过上下文的color设置icon的颜色，前提是icon图片的颜色固定，即原svg的fill=&quot;none&quot;或fill=&quot;currentColor&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>plugin</category>
      </categories>
  </entry>
</search>
